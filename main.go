package main

import (
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"strconv"
	"strings"
	"time"

	"walkthedog/internal/dates"
	sheet "walkthedog/internal/google/sheet"
	"walkthedog/internal/models"

	"github.com/davecgh/go-spew/spew"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gopkg.in/yaml.v2"
)

// Environments
const (
	productionEnv  = "production"
	testEnv        = "test"
	developmentEnv = "development"
)

// Commands
const (
	commandStart       = "/start"
	commandMasterclass = "/masterclass"
	commandError       = "/error"

	// Related to donation
	commandDonation            = "/donation"
	commandDonationShelterList = "/donation_shelter_list"

	// Related to Shelter trip process
	commandGoShelter          = "/go_shelter"
	commandChooseShelter      = "/choose_shelter"
	commandTripDates          = "/trip_dates"
	commandChooseDates        = "/choose_date"
	commandIsFirstTrip        = "/is_first_trip"
	commandTripPurpose        = "/trip_purpose"
	commandTripBy             = "/trip_by"
	commandHowYouKnowAboutUs  = "/how_you_know_about_us"
	commandSummaryShelterTrip = "/summary_shelter_trip"
)

// Answers
const (
	chooseByShelter = "–í—ã–±–æ—Ä –ø–æ –ø—Ä–∏—é—Ç—É"
	chooseByDate    = "–í—ã–±–æ—Ä –ø–æ –¥–∞—Ç–µ"
)

// Phrases
const (
	errorWrongShelterName = "–Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—é—Ç–∞"
)

// purposes represents list of available purposes user can choose to going to shelter.
var purposes = []string{
	"–ü–æ–≥—É–ª—è—Ç—å —Å —Å–æ–±–∞–∫–∞–º–∏",
	"–ü–æ–º–æ—á—å –ø—Ä–∏—é—Ç—É —Ä—É–∫–∞–º–∏ (–ø—Ä–∏–±—Ä–∞—Ç—å, –ø–æ–º—ã—Ç—å, –ø–æ—á–µ—Å–∞—Ç—å :-)",
	"–ü–æ—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è —Å–æ—Ü.—Å–µ—Ç–µ–π",
	"–ü—Ä–∏–≤–µ–∑—Ç–∏ –∫–æ—Ä–º/–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã –∏ —Ç.–ø. –¥–ª—è –Ω—É–∂–¥ –ø—Ä–∏—é—Ç–∞",
	"–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥–ª—è –ø—Ä–∏—é—Ç–∞",
	"–ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–¥–µ–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –Ω–∞ –≤—ã–µ–∑–¥–µ :-)",
}

// tripByOptions represents list of options to come to shelters.
var tripByOptions = []string{
	"–ï–¥—É –Ω–∞ —Å–≤–æ–µ–π –º–∞—à–∏–Ω–µ –∏–ª–∏ —Å –∫–µ–º-—Ç–æ –Ω–∞ –º–∞—à–∏–Ω–µ (–º–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç)",
	"–ï–¥—É –Ω–∞ —Å–≤–æ–µ–π –º–∞—à–∏–Ω–µ –∏–ª–∏ —Å –∫–µ–º-—Ç–æ –Ω–∞ –º–∞—à–∏–Ω–µ (–≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ—Å—Ç–∞ –¥—Ä—É–≥–∏–º –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º)",
	"–ï–¥—É –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º",
	"–ò—â—É —Å –∫–µ–º –ø–æ–µ—Ö–∞—Ç—å",
	"–ö–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç :)",
}

// sources represents list of available sources of information user knew about walkthedog.
var sources = []string{
	"–°–∞—Ä–∞—Ñ–∞–Ω–Ω–æ–µ —Ä–∞–¥–∏–æ (–¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, –∫–æ–ª–ª–µ–≥–∏)",
	"–í—ã—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —è—Ä–º–∞—Ä–∫–∞",
	"–ù–∞—à–µ–ª –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
	"–ú–æ—Å–≤–æ–ª–æ–Ω—Ç–µ—Ä",
	"–í–∫–æ–Ω—Ç–∞–∫—Ç–µ",
	"–ù–∞—à –∫–∞–Ω–∞–ª –≤ WhatsApp",
	"–ù–∞—à –∫–∞–Ω–∞–ª –≤ Telegram",
	"–î—Ä—É–≥–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
	"–ê–≤–∏—Ç–æ/–Æ–ª–∞",
	"–ó–Ω–∞—é –≤–∞—Å —É–∂–µ –¥–∞–≤–Ω–æ :)",
	"–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
}

// statePool store all chat states
var statePool = make(map[int64]*models.State)

//TODO: remove poll_id after answer.
// polls stores poll_id => chat_id
var polls = make(map[string]int64)

type EnvironmentConfig map[string]*models.TelegramConfig

// SheltersList represents list of Shelters
type SheltersList map[int]*models.Shelter

// NewTripToShelter initializes new object for storing user's trip information.
func NewTripToShelter(userName string) *models.TripToShelter {
	return &models.TripToShelter{
		Username: userName,
	}
}

func main() {
	// getting config by environment
	env := productionEnv //developmentEnv
	config, err := getConfig(env)
	if err != nil {
		log.Panic(err)
	}

	// bot init
	bot, err := tgbotapi.NewBotAPI(config.APIToken)
	if err != nil {
		log.Panic(err)
	}

	if env == developmentEnv {
		bot.Debug = true
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	// set how often check for updates
	u := tgbotapi.NewUpdate(0)
	u.Timeout = config.Timeout

	updates := bot.GetUpdatesChan(u)

	var lastMessage string

	// getting shelters
	shelters, err := getShelters()
	if err != nil {
		log.Panic(err)
	}

	var newTripToShelter *models.TripToShelter

	// getting message
	for update := range updates {
		var chatId int64
		// extract chat id for different cases
		if update.Message != nil {
			chatId = update.Message.Chat.ID
		} else if update.PollAnswer != nil {
			chatId = polls[update.PollAnswer.PollID]
		}

		// fetching state or init new
		state, ok := statePool[chatId]
		log.Printf("**state**: %+v", state)
		if !ok {
			state = &models.State{
				ChatId:      chatId,
				LastMessage: "",
			}
			statePool[chatId] = state
		}
		// initilize last message and trip to shelter
		lastMessage = state.LastMessage
		newTripToShelter = state.TripToShelter

		if update.Message != nil { // If we got a message
			log.Printf("[%s]: %s", update.Message.From.UserName, update.Message.Text)
			log.Printf("lastMessage: %s", lastMessage)

			var msgObj tgbotapi.MessageConfig
			//check for commands
			switch update.Message.Text {
			case commandStart:
				log.Println("[walkthedog_bot]: Send start message")
				msgObj = startMessage(chatId)
				msgObj.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				bot.Send(msgObj)
				lastMessage = commandStart
			case commandGoShelter:
				log.Println("[walkthedog_bot]: Send appointmentOptionsMessage message")
				lastMessage = goShelterCommand(bot, &update)
			case commandChooseShelter:
				lastMessage = chooseShelterCommand(bot, &update, &shelters)
			case commandTripDates:
				lastMessage = tripDatesCommand(bot, &update, newTripToShelter, &shelters, lastMessage)
			case commandMasterclass:
				log.Println("[walkthedog_bot]: Send masterclass")
				msgObj = masterclass(chatId)
				bot.Send(msgObj)
				lastMessage = commandMasterclass
			case commandDonation:
				log.Println("[walkthedog_bot]: Send donation")
				lastMessage = donationCommand(bot, chatId)
			case commandDonationShelterList:
				log.Println("[walkthedog_bot]: Send donationShelterList")
				msgObj = donationShelterList(chatId, &shelters)
				bot.Send(msgObj)
				lastMessage = commandDonationShelterList
			default:
				switch lastMessage {
				case commandGoShelter:
					if update.Message.Text == chooseByShelter {
						lastMessage = chooseShelterCommand(bot, &update, &shelters)
					} else if update.Message.Text == chooseByDate {
						//lastMessage = tripDatesCommand(bot, &update, newTripToShelter, &shelters, lastMessage)
						ErrorFrontend(bot, &update, newTripToShelter, "–ó–∞–ø–∏—Å—å –ø–æ –í—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ üò•")
						lastMessage = goShelterCommand(bot, &update)
						break
					} else {
						ErrorFrontend(bot, &update, newTripToShelter, fmt.Sprintf("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–∫—É \"%s\" –∏–ª–∏ \"%s\"", chooseByDate, chooseByShelter))
						lastMessage = goShelterCommand(bot, &update)
						break
					}
				// when shelter was chosen next step to chose date
				case commandChooseShelter:
					if newTripToShelter == nil {
						newTripToShelter = NewTripToShelter(update.Message.From.UserName)
					}
					shelter, err := shelters.getShelterByNameID(update.Message.Text)

					if err != nil {
						ErrorFrontend(bot, &update, newTripToShelter, err.Error())
						chooseShelterCommand(bot, &update, &shelters)
						break
					}
					newTripToShelter.Shelter = shelter

					log.Println("[walkthedog_bot]: Send whichDate question")
					msgObj = whichDate(chatId, shelter)
					bot.Send(msgObj)
					lastMessage = commandChooseDates
				case commandChooseDates:
					if isTripDateValid(update.Message.Text, newTripToShelter) {
						lastMessage = isFirstTripCommand(bot, &update, newTripToShelter)
					} else {
						ErrorFrontend(bot, &update, newTripToShelter, "–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å —Å –¥–∞—Ç–æ–π ü§î")
						lastMessage = tripDatesCommand(bot, &update, newTripToShelter, &shelters, lastMessage)
					}
				case commandIsFirstTrip:
					lastMessage, err = tripPurposeCommand(bot, &update, newTripToShelter)
					if err != nil {
						ErrorFrontend(bot, &update, newTripToShelter, err.Error())
						if isTripDateValid(update.Message.Text, newTripToShelter) {
							lastMessage = isFirstTripCommand(bot, &update, newTripToShelter)
						} else {
							lastMessage = tripDatesCommand(bot, &update, newTripToShelter, &shelters, lastMessage)
						}
					}
				case commandTripPurpose:
					ErrorFrontend(bot, &update, newTripToShelter, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–∏ –ø–æ–µ–∑–¥–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")
				case commandTripBy:
					ErrorFrontend(bot, &update, newTripToShelter, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –¥–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ –ø—Ä–∏—é—Ç–∞")
				case commandHowYouKnowAboutUs:
					ErrorFrontend(bot, &update, newTripToShelter, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏")
				default:
					log.Println("[walkthedog_bot]: Unknown command")

					message := "–ù–µ –ø–æ–Ω–∏–º–∞—é üê∂ –ü–æ–ø—Ä–æ–±—É–π " + commandStart
					msgObj := tgbotapi.NewMessage(chatId, message)
					bot.Send(msgObj)
					lastMessage = commandChooseDates
				}
			}
		} else if update.Poll != nil {
			//log.Printf("[%s]: %s", update.FromChat().FirstName, "save poll id")
			//polls[update.Poll.ID] = update.FromChat().ID
		} else if update.PollAnswer != nil {
			log.Printf("[%s]: %v", update.PollAnswer.User.UserName, update.PollAnswer.OptionIDs)
			log.Printf("lastMessage: %s", lastMessage)

			switch lastMessage {
			case commandTripPurpose:
				for _, option := range update.PollAnswer.OptionIDs {
					newTripToShelter.Purpose = append(newTripToShelter.Purpose, purposes[option])
				}

				lastMessage = tripByCommand(bot, &update, newTripToShelter)
			case commandTripBy:
				for _, option := range update.PollAnswer.OptionIDs {
					newTripToShelter.TripBy = tripByOptions[option]
					break
				}
				lastMessage = howYouKnowAboutUsCommand(bot, &update, newTripToShelter)
			case commandHowYouKnowAboutUs:
				for _, option := range update.PollAnswer.OptionIDs {
					newTripToShelter.HowYouKnowAboutUs = sources[option]
					break
				}

				summaryCommand(bot, &update, newTripToShelter)
				lastMessage = donationCommand(bot, polls[update.PollAnswer.PollID])

				//save to google sheet
				srv, err := sheet.NewService()
				if err != nil {
					log.Fatalf(err.Error())
				} else {
					resp, err := sheet.SaveTripToShelter(srv, newTripToShelter)
					if err != nil {
						log.Fatalf("Unable to write data from sheet: %v", err)
					}
					if resp.ServerResponse.HTTPStatusCode != 200 {
						log.Fatalf("error: %+v", resp)
					}
				}
			}
		}
		// save state to pool
		state.LastMessage = lastMessage
		state.TripToShelter = newTripToShelter
		statePool[chatId] = state
		log.Println("[trip_state]: ", newTripToShelter)
	}
}

// goShelterCommand prepares message about available options to start appointment to shelter and then sends it and returns last command.
func goShelterCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update) string {
	msgObj := appointmentOptionsMessage(update.Message.Chat.ID)
	bot.Send(msgObj)
	return commandGoShelter
}

// chooseShelterCommand prepares message about available shelters and then sends it and returns last command.
func chooseShelterCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update, shelters *SheltersList) string {
	log.Println("[walkthedog_bot]: Send whichShelter question")
	msgObj := whichShelter(update.Message.Chat.ID, shelters)
	bot.Send(msgObj)
	return commandChooseShelter
}

// isFirstTripCommand prepares message with question "is your first trip?" and then sends it and returns last command.
func isFirstTripCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update, newTripToShelter *models.TripToShelter) string {
	newTripToShelter.Date = update.Message.Text
	msgObj := isFirstTrip(update.Message.Chat.ID)
	bot.Send(msgObj)
	return commandIsFirstTrip
}

// isTripDateValid return true if it's one of the available dates of shelter trip.
func isTripDateValid(date string, newTripToShelter *models.TripToShelter) bool {
	isCorrectDate := false

	if newTripToShelter == nil {
		return false
	}
	if newTripToShelter.Shelter == nil {
		return false
	}

	shelterDates := getDatesByShelter(newTripToShelter.Shelter)
	for _, v := range shelterDates {
		if v == date {
			isCorrectDate = true
			break
		}
	}
	return isCorrectDate
}

// tripPurposeCommand prepares poll with question about your purpose for this trip and then sends it and returns last command.
func tripPurposeCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update, newTripToShelter *models.TripToShelter) (string, error) {
	if update.Message.Text == "–î–∞" {
		newTripToShelter.IsFirstTrip = true
	} else if update.Message.Text == "–ù–µ—Ç" {
		newTripToShelter.IsFirstTrip = false
	} else {
		return commandIsFirstTrip, errors.New("–¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã \"–î–∞\" –∏ \"–ù–µ—Ç\"")
	}

	msgObj := tripPurpose(update.Message.Chat.ID)

	responseMessage, _ := bot.Send(msgObj)
	polls[responseMessage.Poll.ID] = responseMessage.Chat.ID

	return commandTripPurpose, nil
}

// tripByCommand prepares poll with question about how he going to come to shelter and then sends it and returns last command.
func tripByCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update, newTripToShelter *models.TripToShelter) string {
	msgObj := tripBy(polls[update.PollAnswer.PollID])
	responseMessage, _ := bot.Send(msgObj)
	polls[responseMessage.Poll.ID] = responseMessage.Chat.ID
	return commandTripBy
}

// howYouKnowAboutUsCommand prepares poll with question about where did you know about us and then sends it and returns last command.
func howYouKnowAboutUsCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update, newTripToShelter *models.TripToShelter) string {
	msgObj := howYouKnowAboutUs(polls[update.PollAnswer.PollID])
	responseMessage, _ := bot.Send(msgObj)
	polls[responseMessage.Poll.ID] = responseMessage.Chat.ID
	return commandHowYouKnowAboutUs
}

// summaryCommand prepares message with summary and then sends it and returns last command.
func summaryCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update, newTripToShelter *models.TripToShelter) string {
	msgObj := summary(polls[update.PollAnswer.PollID], newTripToShelter)
	bot.Send(msgObj)
	return commandSummaryShelterTrip
}

// donationCommand prepares message with availabele ways to dontate us or shelters and then sends it and returns last command.
func donationCommand(bot *tgbotapi.BotAPI, chatId int64) string {
	msgObj := donation(chatId)
	bot.Send(msgObj)
	return commandDonation
}

// tripDatesCommand prepares message with availabele dates to go to shelters and then sends it and returns last command.
func tripDatesCommand(bot *tgbotapi.BotAPI, update *tgbotapi.Update, newTripToShelter *models.TripToShelter, shelters *SheltersList, lastMessage string) string {
	if newTripToShelter == nil {
		message := "–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è :("
		msgObj := tgbotapi.NewMessage(update.Message.Chat.ID, message)
		bot.Send(msgObj)
		return commandGoShelter
		/* newTripToShelter = NewTripToShelter(update.Message.From.UserName)
		if lastMessage == commandChooseShelter {
			panic("change it if I use it")
			shelter, err := shelters.getShelterByNameID(update.Message.Text)

			if err != nil {
				ErrorFrontend(bot, update, newTripToShelter, err.Error())
				chooseShelterCommand(bot, update, shelters)
			}
			newTripToShelter.Shelter = shelter
		} else if lastMessage == commandGoShelter {

		} */
	}
	log.Println("[walkthedog_bot]: Send whichDate question")
	msgObj := whichDate(update.Message.Chat.ID, newTripToShelter.Shelter)
	bot.Send(msgObj)
	return commandChooseDates
}

// getShelterByNameID returns Shelter and error using given shelter name in following format:
// 1. –•–∞—Å–∫–∏ –•–µ–ª–ø (–ò—Å—Ç—Ä–∞)
// it substr string before dot and try to find shelter by ID.
func (shelters SheltersList) getShelterByNameID(name string) (*models.Shelter, error) {
	dotPosition := strings.Index(name, ".")
	if dotPosition == -1 {
		//log.Println(errors.New(fmt.Sprintf("message %s don't contain dot", name)))
		return nil, errors.New(errorWrongShelterName)
	}
	shelterId, err := strconv.Atoi(name[0:dotPosition])
	if err != nil {
		log.Println(err)
		return nil, errors.New(errorWrongShelterName)
	}
	//log.Println("id part", update.Message.Text[0:strings.Index(update.Message.Text, ".")])
	shelter, ok := shelters[shelterId]
	if !ok {
		log.Println(fmt.Errorf("shelter name \"%s\", extracted id=\"%d\" is not found", name, shelterId))
		return nil, errors.New(errorWrongShelterName)
	}

	return shelter, nil
}

// ErrorFrontend sends error message to user and returns last command.
func ErrorFrontend(bot *tgbotapi.BotAPI, update *tgbotapi.Update, newTripToShelter *models.TripToShelter, errMessage string) string {
	log.Println("[walkthedog_bot]: Send ERROR")
	if errMessage == "" {
		errMessage = "Error"
	}
	msgObj := errorMessage(update.Message.Chat.ID, errMessage)
	bot.Send(msgObj)
	return commandError
}

// getConfig returns config by environment.
func getConfig(environment string) (*models.TelegramConfig, error) {
	yamlFile, err := ioutil.ReadFile("configs/telegram.yml")
	if err != nil {
		return nil, err
	}
	var environmentConfig EnvironmentConfig
	err = yaml.Unmarshal(yamlFile, &environmentConfig)
	if err != nil {
		return nil, err
	}

	if environmentConfig[environment] == nil {
		return nil, errors.New("wrong environment set")
	}

	log.Println(environmentConfig[environment])

	return environmentConfig[environment], nil
}

// getShelters returns list of shelters with information about them.
func getShelters() (SheltersList, error) {
	yamlFile, err := ioutil.ReadFile("configs/shelters.yml")
	if err != nil {
		return nil, err
	}
	var sheltersList SheltersList
	err = yaml.Unmarshal(yamlFile, &sheltersList)
	if err != nil {
		return nil, err
	}

	return sheltersList, nil
}

// masterclass returns masterclasses.
func masterclass(chatId int64) tgbotapi.MessageConfig {
	//ask about what shelter are you going
	message := `–ó–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è, –∞ –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –Ω–∞ walkthedog.ru/cages`
	msgObj := tgbotapi.NewMessage(chatId, message)

	return msgObj
}

// donationShelterList returns information about donations.
func donationShelterList(chatId int64, shelters *SheltersList) tgbotapi.MessageConfig {
	message := "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–∏—é—Ç:\n"

	for i := 1; i <= len(*shelters); i++ {
		if len((*shelters)[i].DonateLink) == 0 {
			continue
		}
		message += fmt.Sprintf("%s. %s\n %s\n", (*shelters)[i].ID, (*shelters)[i].Title, (*shelters)[i].DonateLink)
	}
	msgObj := tgbotapi.NewMessage(chatId, message)
	msgObj.DisableWebPagePreview = true
	msgObj.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)

	return msgObj
}

// startMessage returns first message with all available commands.
func startMessage(chatId int64) tgbotapi.MessageConfig {
	//ask about what shelter are you going
	message := `üêï /go_shelter –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã–µ–∑–¥ –≤ –ø—Ä–∏—é—Ç

üìê /masterclass –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –±—É–¥–æ–∫ –∏ –∫–æ—Ç–æ–¥–æ–º–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏—é—Ç–æ–≤

‚ù§Ô∏è /donation –°–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ

@walkthedog_support –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±—Ä—É—é –∏–¥–µ—é

@walkthedog –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª`
	msgObj := tgbotapi.NewMessage(chatId, message)

	return msgObj
}

// appointmentOptionsMessage returns message with 2 options.
func appointmentOptionsMessage(chatId int64) tgbotapi.MessageConfig {
	//ask about what shelter are you going
	message := "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã–µ–∑–¥ –≤ –ø—Ä–∏—é—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞—Ç—ã (–Ω–∞–ø—Ä. —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ) –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏—é—Ç –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≤—ã–µ–∑–¥ –≤ –Ω–µ–≥–æ. –ù–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫–µ walkthedog.ru/shelters –µ—Å—Ç—å —É–¥–æ–±–Ω–∞—è –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∂–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –ø—Ä–∏—é—Ç."
	msgObj := tgbotapi.NewMessage(chatId, message)

	var numericKeyboard = tgbotapi.NewReplyKeyboard(tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton(chooseByDate),
		tgbotapi.NewKeyboardButton(chooseByShelter),
	))
	msgObj.ReplyMarkup = numericKeyboard
	return msgObj
}

// whichShelter returns message with question "Which Shelter you want go" and button options.
func whichShelter(chatId int64, shelters *SheltersList) tgbotapi.MessageConfig {
	//ask about what shelter are you going
	message := "–í –∫–∞–∫–æ–π –ø—Ä–∏—é—Ç –∂–µ–ª–∞–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
	msgObj := tgbotapi.NewMessage(chatId, message)

	var sheltersButtons [][]tgbotapi.KeyboardButton
	log.Println("shelters before range", shelters)

	for i := 1; i <= len(*shelters); i++ {
		buttonRow := tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(fmt.Sprintf("%s. %s", (*shelters)[i].ID, (*shelters)[i].Title)),
		)

		sheltersButtons = append(sheltersButtons, buttonRow)
	}
	log.Println("sheltersButtons", sheltersButtons)
	var numericKeyboard = tgbotapi.NewReplyKeyboard(sheltersButtons...)
	msgObj.ReplyMarkup = numericKeyboard
	return msgObj
}

// whichShelter returns message with question "Which Shelter you want go" and button options.
func errorMessage(chatId int64, message string) tgbotapi.MessageConfig {
	msgObj := tgbotapi.NewMessage(chatId, message)
	return msgObj
}

// whichDate returns object including message text "Which Date you want to go" and other message config.
func whichDate(chatId int64, shelter *models.Shelter) tgbotapi.MessageConfig {
	//ask about what shelter are you going
	message := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:"
	msgObj := tgbotapi.NewMessage(chatId, message)

	var numericKeyboard tgbotapi.ReplyKeyboardMarkup
	var dateButtons [][]tgbotapi.KeyboardButton

	shelterDates := getDatesByShelter(shelter)
	for _, value := range shelterDates {
		buttonRow := tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(value),
		)
		dateButtons = append(dateButtons, buttonRow)
	}
	numericKeyboard = tgbotapi.NewReplyKeyboard(dateButtons...)

	msgObj.ReplyMarkup = numericKeyboard
	return msgObj
}

// getDatesByShelter return list of dates.
func getDatesByShelter(shelter *models.Shelter) []string {
	var shedule []string
	now := time.Now()
	spew.Dump(shelter)
	if shelter.Schedule.Type == "regularly" {

		scheduleWeek := shelter.Schedule.Details[0]
		scheduleDay := shelter.Schedule.Details[1]
		scheduleTime := shelter.Schedule.TimeStart
		for i := 0; i < 6; i++ {
			month := time.Month(int(now.Month()) + i)
			day := calculateDay(scheduleDay, scheduleWeek, month)
			if i == 0 && now.Day() > day.Day() {
				continue
			}
			shedule = append(shedule, dates.WeekDaysRu[day.Weekday()]+" "+day.Format("02.01.2006")+" "+scheduleTime)

		}
	} else if shelter.Schedule.Type == "everyday" {
		//TODO: finish everyday type
	}

	return shedule
}

// isFirstTrip returns object including message text "is your first trip" and other message config.
func isFirstTrip(chatId int64) tgbotapi.MessageConfig {
	message := "–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –ø–æ–µ–∑–¥–∫–∞?"
	msgObj := tgbotapi.NewMessage(chatId, message)

	var numericKeyboard = tgbotapi.NewReplyKeyboard(tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–∞"),
		tgbotapi.NewKeyboardButton("–ù–µ—Ç"),
	))
	msgObj.ReplyMarkup = numericKeyboard
	return msgObj
}

// tripPurpose returns object including poll about trip purpose and other poll config.
func tripPurpose(chatId int64) tgbotapi.SendPollConfig {
	message := "üéØ –ß–µ–º —Ö–æ—á—É –ø–æ–º–æ—á—å"
	options := purposes
	msgObj := tgbotapi.NewPoll(chatId, message, options...)
	msgObj.AllowsMultipleAnswers = true
	msgObj.IsAnonymous = false
	msgObj.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	return msgObj
}

// tripBy returns object including poll about how he/she going to come to shelter poll config.
func tripBy(chatId int64) tgbotapi.SendPollConfig {
	message := "üöó –ö–∞–∫ –¥–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ –ø—Ä–∏—é—Ç–∞?"
	options := tripByOptions
	msgObj := tgbotapi.NewPoll(chatId, message, options...)
	msgObj.IsAnonymous = false
	msgObj.AllowsMultipleAnswers = false
	return msgObj
}

// howYouKnowAboutUs returns object including poll about how he/she know about us and other poll config.
func howYouKnowAboutUs(chatId int64) tgbotapi.SendPollConfig {
	message := "ü§´ –ö–∞–∫ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?"
	options := sources
	msgObj := tgbotapi.NewPoll(chatId, message, options...)
	msgObj.IsAnonymous = false
	msgObj.AllowsMultipleAnswers = false
	return msgObj
}

// summary returns object including message text with summary of user's answers and other message config.
func summary(chatId int64, newTripToShelter *models.TripToShelter) tgbotapi.MessageConfig {
	guide := `–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: %s (—Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–∏—é—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)

üìé –ó–∞ 5-7 –¥–Ω–µ–π –¥–æ –≤—ã–µ–∑–¥–∞ –º—ã –ø—Ä–∏—à–ª–µ–º –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Whats App —á–∞—Ç, –≥–¥–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –î–æ –≤—Å—Ç—Ä–µ—á–∏!
	`
	if newTripToShelter.Shelter.Guide != "" {
		guide = "–í—Å–µ –¥–µ—Ç–∞–ª–∏ –æ –≤—ã–µ–∑–¥–µ –≤ –ø—Ä–∏—é—Ç –≤–∫–ª—é—á–∞—è –∞–¥—Ä–µ—Å, –∫–∞–∫ –¥–æ–µ—Ö–∞—Ç—å, —á—Ç–æ –≤–∑—è—Ç—å –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏—é—Ç–∞: " + newTripToShelter.Shelter.Guide
	} else {
		guide = fmt.Sprintf(guide, newTripToShelter.Shelter.Address)
	}
	message := fmt.Sprintf(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
	
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
–í—ã–µ–∑–¥ –≤ –ø—Ä–∏—é—Ç: <a href="%s">%s</a>
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: %s
%s

‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–∏–µ –≤ –≤—ã–µ–∑–¥–µ –≤ –ø—Ä–∏—é—Ç —è–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º. –ü—Ä–∏ —ç—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ.

üí¨ –ó–∞ 5 –¥–Ω–µ–π –¥–æ –≤—ã–µ–∑–¥–∞ –º—ã –¥–æ–±–∞–≤–∏–º –≤–∞—Å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç –≤—ã–µ–∑–¥–∞, –≥–¥–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ —É—Ç–æ—á–Ω–∏—Ç—å –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞—Ö, —É –∫–æ–≥–æ –±—É–¥—É—Ç –º–µ—Å—Ç–∞ –≤ –º–∞—à–∏–Ω–µ.

–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç - –ø–∏—à–∏—Ç–µ @walkthedog_support
`, newTripToShelter.Shelter.Link,
		newTripToShelter.Shelter.Title,
		newTripToShelter.Date,
		guide)
	msgObj := tgbotapi.NewMessage(chatId, message)
	msgObj.ParseMode = tgbotapi.ModeHTML

	return msgObj
}

// donation set donation text and message options and returns MessageConfig.
func donation(chatId int64) tgbotapi.MessageConfig {
	message :=
		`–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ 500 —Ä—É–±–ª–µ–π –∏ –±–æ–ª–µ–µ –æ—Å—á–∞—Å—Ç–ª–∏–≤–∏—Ç 1 —Å–æ–±–∞–∫—É (500 —Ä—É–±–ª–µ–π = 2 –Ω–µ–¥–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è –æ–¥–Ω–æ–π —Å–æ–±–∞–∫–∏ –≤ –ø—Ä–∏—é—Ç–µ). –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø—Ä–∏—é—Ç.

üìç /donation_shelter_list - –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏—é—Ç

üìç –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +7 916 085 1342 (–ú–∏—Ö–∞–π–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π) - —É–∫–∞–∂–∏—Ç–µ "–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ".

üìç <a href="https://yoomoney.ru/to/410015848442299">–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏</a>
`
	msgObj := tgbotapi.NewMessage(chatId, message)
	msgObj.ParseMode = tgbotapi.ModeHTML
	msgObj.DisableWebPagePreview = true
	msgObj.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)

	return msgObj
}

// calculateDay returns the date of by given day of week, week number and month.
func calculateDay(dayOfWeek int, week int, month time.Month) time.Time {
	firstDayOfMonth := time.Date(time.Now().Year(), month, 1, 0, 0, 0, 0, time.UTC)
	//currentDay := (8 - int(firstDayOfMonth.Weekday())) % 7

	currentDay := int(firstDayOfMonth.Weekday())
	if currentDay == 0 {
		currentDay = 7
	}
	var resultDay int
	if dayOfWeek == currentDay {
		resultDay = 1 + 7*(week-1)
	} else if dayOfWeek > currentDay {
		resultDay = 1 + (dayOfWeek - currentDay) + (week-1)*7
	} else {
		resultDay = 1 + (7 - currentDay + dayOfWeek) + (week-1)*7
	}

	return time.Date(time.Now().Year(), month, resultDay, 0, 0, 0, 0, time.UTC)
}
